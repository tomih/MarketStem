FORMAT: 1A
HOST: http://marketstem.com/api

# marketstem
MarketStem joins market data from several digital asset exchanges into one convenient streaming and polling API.

##Supported Exchanges
<a href="https://anxpro.com/" target="_blank">ANXPRO</a>,
<a href="https://bitcurex.com/" target="_blank">BITCUREX</a>,
<a href="https://www.bitfinex.com/" target="_blank">BITFINEX</a>,
<a href="https://www.bitstamp.net/" target="_blank">BITSTAMP</a>,
<a href="https://btc-e.com/" target="_blank">BTCE</a>,
<a href="https://vip.btcchina.com/" target="_blank">BTCHINA</a>,
<a href="https://bter.com/" target="_blank">BTER</a>,
<a href="https://campbx.com/" target="_blank">CAMPBX</a>,
<a href="https://cex.io/" target="_blank">CEXIO</a>,
<a href="https://coinbase.com/" target="_blank">COINBASE</a>,
<a href="https://crypto-trade.com/" target="_blank">CRYPTOTRADE</a>,
<a href="https://www.cryptsy.com/" target="_blank">CRYPTSY</a>,
<a href="https://hitbtc.com/" target="_blank">HITBTC</a>,
<a href="https://www.itbit.com/" target="_blank">ITBIT</a>,
<a href="https://justcoin.com/" target="_blank">JUSTCOIN</a>,
<a href="https://www.kraken.com/" target="_blank">KRAKEN</a>,
<a href="https://lakebtc.com/" target="_blank">LAKEBTC</a>,
<a href="https://www.vaultofsatoshi.com/" target="_blank">VAULTOFSATOSHI</a>

If you would like to see an additional exchange added you can add a client implementation to the open source project <a href="https://github.com/timmolter/XChange" target="_blank">XChange</a> or put up a <a href="http://xeiam.com/bounties" target="_blank">bounty</a> to have it implemented by the community.
##Connecting To The Streaming API
The streaming web-socket API is backed by <a href="https://github.com/stevegraham/slanger" target="_blank">Slanger</a>, an open source alternative to <a href="http://pusher.com/" target="_blank">Pusher</a>.  The <a href="http://pusher.com/docs/client_libraries" target="_blank">client libraries</a> supplied by Pusher can be used to connect and subscribe to channels.

 **Pusher/Slanger Application Key:** `7c184500ec35e0786b0e`  
 **Websocket Host:** `marketstem.com`  
 **HTTP Host:** `marketstem.com`  

        <!DOCTYPE html>
        <head>
            <title>MarketStem Demo</title>
            <script src="http://js.pusher.com/2.2/pusher.min.js" type="text/javascript"></script>
            <script type="text/javascript">
                var pusher = new Pusher('7c184500ec35e0786b0e', {
                    wsHost: "marketstem.com",
                    httpHost: "marketstem.com",
                    disableFlash: true,
                    disableStats: true
                });
            
                var channelName = "ticker"
                var bindEvent = "ticker"
                var tickerChannel = pusher.subscribe( channelName ); 
                tickerChannel.bind( bindEvent, function( data ) {
                    document.getElementById( "ticker" ).innerHTML = JSON.stringify( data );
                });
            </script>
    
            <body>
                <p id="ticker">Waiting for ticker data...</p>
            </body>
        </head>


##Terminology
* Channel - A Pusher endpoint used to stream a specific type of data, i.e., `ticker.JUSTCOIN` streams all tickers for the exchange JUSTCOIN.
* Event - Used to indicate the type of data published/subcribed on a channel.  Allows a client to subscribe to a specific event on a given channel. See <a href="http://pusher.com/docs/client_api_guide/client_events" target="_blank">Pusher Events</a> for more information.
* Asset - A symbol for anything that can be traded on the supported exchanges above.
* Market - A pair of assets that can be traded for each other.  The first asset is considered the trade asset and the second is the price asset.
* Market Depth - See <a href="http://en.wikipedia.org/wiki/Order_book_(trading)#Book_depth" target="_blank">Order Book Depth</a>.

##Data Format
* Exchange - Uppercase string, e.g., `BTCE`.
* Asset - Uppercase string, e.g., `USD`.  Assets are normalized to a common symbol across exchanges, e.g., `DOGE -> XDG`.  If you notice a discrepency for an asset symbol between exchanges please contact me and I will update it immediately.
* Market - Two tradable asset identifiers concatenated together with an underscore, e.g., `BTC_USD`.  The second asset is the asset for which the market is priced in.
* Timestamps - Represented as <a href="http://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601</a> formatted strings, e.g., `2014-06-03T05:22:01.641Z`.
* Numbers - See <a href="http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html#toPlainString" target="_blank">Java's BigDecimal plain string format</a>.

##Message Frequency
* Ticker - Each individual ticker is polled for once every five seconds and then published. 
* Aggregate Ticker - Updated for every exchange ticker received and published at most once every five seconds for each market.
* Market Depth - Also polled for once every five seconds.  If there is no change detected it will only be published with the bind event of `depth-checkin` no more than once a minute.  If a change is detected it is published as both `depth` and `depth-checkin` events.  It is recommended that you use the HTTP API if you need to populate depth data on startup and then use the streaming API for updates.

Note: In some cases this is slower to accomodate caching on the exchange side.  

##Data Collection Design

The backend consists of a globally distributed network of failover nodes.
Nodes consist of a collection of services that are each responsible for their own resource, e.g., all tickers for the exchange Kraken`ticker.KRAKEN`.
Failover is handled on a resource level. If a resource fails to check in within two minutes an identical resource service from another node will take over.
Each resource service repeatedly polls its respective exchanges' service.  Once the market data is retrieved it is then normalized to a common data model, published to our network of Slanger nodes and then pushed to you.  

* <a href="http://www.gliffy.com/go/publish/5798364" target="_blank">Complete Service Architecture Diagram</a>  

##Benefits
* Open source community-driven exchange client development ensures that we can evolve as quickly as the crypto currency ecosystem.  
 * Backend exchange clients are from <a href="https://github.com/timmolter/XChange" target="_blank">XChange</a>.  If you would like to see a new exchange, simply add a bountied feature request.
* Single service endpoint & common data model for all exchange data.
* No need to manage polling rate-limits.
* No need to manage exchange data cache durations to prevent duplicate data/processing.
* Increased sampling frequency because we can collect data for a single exchange from different ip addresses.
* New and removed assets are continually updated.

##Monthly Cost Estimate
*  <a href="https://www.digitalocean.com/pricing/" target="_blank">Digital Ocean Server Hosting</a>:
 * 2 * $10 VPS = `$20`
 * 2 * $5 VPS = `$10`
 * Total = `$30`

Note: This is the cost for me to run the service. It is free to use, but any donations are appreciated.  I transfer all donations to the
<a href="https://onename.io/marketstem" target="_blank">onename.io marketstem address</a> so that it is visible to everyone on the <a href="https://blockchain.info/address/1EqUnmgUHWHo9kMQMLPht8KcvFj7qzXUtJ" target="_blank">blockchain</a>.

##Contact

Submit any issues or feature requests on [Github](https://github.com/marketstem/MarketStem/issues?state=open)  

marketstem@gmail.com  
  
<a href="https://onename.io/marketstem" target="_blank">1EqUnmgUHWHo9kMQMLPht8KcvFj7qzXUtJ</a>

# Group Polling Market Data
The following HTTP resources are intended to serve as a companion to the streaming API.  For example, it is probably useful to initially populate market depth data with an HTTP GET request that will later be refreshed by streaming depth data.

# assets [/assets]
## Request a list of all known assets across all exchanges. [GET]

+ Response 200 (application/json)

        [
           "UNO",
           "XDG",
           "DMD",
           "DMC",
           "RYC"
        ]

# asset aliases [/assets/aliases]
## Request a map of all asset symbol aliases.  The key asset is the dominant symbol used by this service. [GET]

+ Response 200 (application/json)

        {
           "CNY":[
              "CNH",
              "RMB"
           ],
           "BTC":[
              "XBT"
           ],
           "XDG":[
              "DOGE"
           ]
        }
  
# markets [/markets]
## Request a list of all known markets across all exchanges. [GET]

+ Response 200 (application/json)

        [
           "BTC_USD",
           "BTC_CNY",
           "LTC_BTC"
        ]
        
# exchanges [/exchanges]
## Request a list of all supported exchanges. [GET]

+ Response 200 (application/json)

        [
           "ANXPRO",
           "BTCCHINA",
           "BITFINEX",
           "BITSTAMP",
           "BTCE",
           "BTER",
           "CAMPBX",
           "CRYPTOTRADE",
           "CEXIO",
           "COINBASE",
           "CRYPTSY",
           "HITBTC",
           "JUSTCOIN",
           "KRAKEN",
           "LAKEBTC",
           "VAULTOFSATOSHI"
        ]

# exchange assets [/exchanges/assets?exchanges=]
## Request assets available for a list of one or more exchanges. [GET]

+ Parameters
    + exchanges (optional, string, `JUSTCOIN,KRAKEN`) ... A comma delimited list of exchanges, defaults to all exchanges.
    
+ Response 200 (application/json)

        {
           "JUSTCOIN":[
              "BTC",
              "EUR",
              "USD",
              "XRP",
              "LTC",
              "NOK"
           ]
        }

# exchange markets [/exchanges/markets?exchanges=]
## Request markets available for a list of one or more exchanges. [GET]

+ Parameters
    + exchanges (optional, string, `JUSTCOIN,KRAKEN`) ... A comma delimited list of exchanges, defaults to all exchanges.
    
+ Response 200 (application/json)

        {
           "JUSTCOIN":[
              "BTC_EUR",
              "BTC_LTC",
              "BTC_USD",
              "BTC_XRP",
              "BTC_NOK"
           ]
        }

# fee schedule [/{EXCHANGE}/feeschedule?markets=]
## Request a mapping of markets to fee schedules for a given exchange. [GET]

Note: For exchanges with maker/taker models, only maker fee schedules are supplied.  

#####Fee Schedule Fields
* `fees` A list of commission fee percentages that correspond to a given trade volume range. `[ lower, upper )`   
  * `commissionPercentage` 
  * `commissionFlatRate` Only included if a flat rate exists.  Currently only used for COINBASE.
  * `lower` Inclusive lower trade volume boundary defining the range for which the fee is applicable.
  * `upper` Exclusive upper trade volume boundary defining the range for which the fee is applicable.  This field is not included if there is no upper bound.  
* `volumeAsset` The trade volume asset denomination used to define the fee schedule ranges.  This field is not included if there are no ranges.
        
+ Parameters
    + EXCHANGE (required, string, `JUSTCOIN`) ... The desired exchange to retrieve market depth data for.
    + markets (optional, string, `BTC_USD,BTC_XDG`) ... A comma delimited list of markets.  Defaults to all markets.  
 
+ Response 200 (application/json)

        {
           "BTC_LTC":{
              "fees":[
                 {
                    "commissionPercentage":"0.3",
                    "lower":"15",
                    "upper":"30"
                 },
                 {
                    "commissionPercentage":"0.4",
                    "lower":"5",
                    "upper":"15"
                 },
                 {
                    "commissionPercentage":"0.5",
                    "lower":"0",
                    "upper":"5"
                 },
                 {
                    "commissionPercentage":"0.2",
                    "lower":"30",
                    "upper":"50"
                 },
                 {
                    "commissionPercentage":"0.1",
                    "lower":"50",
                    "upper":"100"
                 },
                 {
                    "commissionPercentage":"0",
                    "lower":"100"
                 }
              ],
              "volumeAsset":"BTC"
           }
        }

# ticker [/{EXCHANGE}/ticker?markets=]
## Request ticker data for an exchange. [GET]

#####Ticker Fields
* `exchange`
* `market`
* `last`  The price of the most recent trade.
* `bid`  The best bid price.
* `ask`  The best ask price.
* `high`  The highest trade price in the last 24 hours.
* `low`  The lowest trade price in the last 24 hours.
* `volume`  The volume traded in the last 24 hours, denominated in the trade asset.
* `timestamp`  If not provided by the exchange it reflects the time initially received by our backend service.

        
+ Parameters
    + EXCHANGE (required, string, `KRAKEN`) ... The desired exchange to retrieve market depth data for.
    + markets (optional, string, `BTC_USD,BTC_XDG`) ... A comma delimited list of markets.  Defaults to all markets.  
 
+ Response 200 (application/json)

        [
           {
              "market":"PPC_BTC",
              "volume":"41.49106",
              "high":"0.00486",
              "last":"0.00479",
              "low":"0.00471",
              "ask":"0.00482",
              "exchange":"BTCE",
              "bid":"0.00479",
              "timestamp":"2014-05-04T23:31:26Z"
           }
        ]

# aggregate ticker [/aggregate/ticker?markets=]
## Request aggregate ticker data for the requested markets. [GET]

An aggregate ticker is intended to give a statistical summary of market data across all exchanges.  If an exchange does not report its trade volume via ticker data it is excluded.  ANXPRO is also excluded as they report the same trade volume across all price assets.

#####Aggregate Ticker Fields
* `market`
* `vwaLast`Volume weighted average last price.
* `vwaLast15` 15 minute moving volume weighted average last price.
* `vwaBid` Volume weighted average bid price.
* `vwaAsk` Volume weighted average ask price.
* `high`  The single highest trade price in the last 24 hours.
* `low`  The single lowest trade price in the last 24 hours.
* `totalVolume` The sum of the volume traded in the last 24 hours across all exchanges, denominated in the trade asset.
* `totalTradeAssetVolume` The sum of the total volume for this trade asset across all markets.  See field `allMarketVolumes` for a list of markets used.
* `totalTradeAssetVolumeForPriceAssetType` The sum of the total volume for this trade asset across all markets for which the price asset type is the same as this markets' price asset type (fiat or digital).  
* `timestamp` Calculation timestamp.
* `exchangeVolumes` Exchange volumes used for this ticker.
* `allMarketVolumes` The total volume for all other markets that have the same trade asset.

+ Parameters
    + markets (required, string, `BTC_USD,BTC_XDG`) ... A comma delimited list of markets.
 
+ Response 200 (application/json)

        [
           {
                "market":"BTC_USD",
                "vwaLast":"640.2271916",
                "vwaLast15":"639.1189731528572",
                "vwaBid":"639.6690524",
                "vwaAsk":"640.96108197",
                "high":"700",
                "low":"587.25",
                "totalVolume":"51322.46081245",
                "totalTradeAssetVolume":"69279.57128391",
                "totalTradeAssetVolumeForPriceAssetType":"69264.68169935",
                "timestamp":"2014-06-30T23:58:53.116Z",
                "exchangeVolumes":{
                     "BTER":"1.0447",
                     "BITSTAMP":"15503.24383652",
                     "VAULTOFSATOSHI":"11.16198578",
                     "HITBTC":"966.94",
                     "JUSTCOIN":"19.32159",
                     "KRAKEN":"18.97691245",
                     "BITFINEX":"21638.59924262",
                     "CRYPTOTRADE":"0.92367508",
                     "BTCE":"13162.24887"
                }
                "allMarketVolumes":{
                     "BTC_NOK":"40.02467",
                     "BTC_USD":"51322.46081245",
                     "BTC_CAD":"216.45633991",
                     "BTC_XRP":"14.88958456",
                     "BTC_GBP":"3.82988",
                     "BTC_PLN":"13.11620635",
                     "BTC_EUR":"2980.85478064",
                     "BTC_CNY":"14521.88168",
                     "BTC_RUR":"166.05733"
                }
           }
        ]

# depth [/{EXCHANGE}/depth?markets=]
## Request market depth data for an exchange. [GET]

#####Market Depth Fields
* `exchange`
* `market`
* `timestamp` Reflects the time initially received by our backend service.
* `bids`  Open bid limit orders sorted from highest to lowest price.
* `asks`  Open ask limit orders sorted from lowest to highest price.
        * Limit orders are formatted as `["trade amount", "price"]`.
        
+ Parameters
    + EXCHANGE (required, string, `KRAKEN`) ... The desired exchange to retrieve market depth data for.
    + markets (optional, string, `BTC_USD,BTC_XDG`) ... A comma delimited list of markets.  Defaults to all markets.  
 
+ Response 200 (application/json)

        [
           {
              "market":"BTC_NMC",
              "asks":[
                 [
                    "0.25",
                    "287.55364"
                 ],
                 [
                    "7",
                    "10000"
                 ]
              ],
              "bids":[
                 [
                    "0.145",
                    "284.69241"
                 ],
                 [
                    "100",
                    "1"
                 ]
              ],
              "exchange":"KRAKEN",
              "timestamp":"2014-06-03T05:22:01.641Z"
           }
        ]


# Group Streaming Market Data
Each section below represents a channel that is available for subscription.  All data objects are returned within a json array.  An effort is made to include multiple objects in a single message if the corresponding exchange offers retrieval of multiple objects in a single call.  

Note:  The apiary documentation doesn't directly support streaming API's, but it is still good for modeling each channel resource and the data that is supplied by each resource.
# ticker [/ticker]
## Subscribe to tickers for all markets on all exchanges.  [GET]

#####Bind Event
* `ticker`  

#####Ticker Fields
* `exchange`
* `market`
* `last`  The price of the most recent trade.
* `bid`  The best bid price.
* `ask`  The best ask price.
* `high`  The highest trade price in the last 24 hours.
* `low`  The lowest trade price in the last 24 hours.
* `volume`  The volume traded in the last 24 hours, denominated in the trade asset.
* `timestamp`  If not provided by the exchange it reflects the time initially received by our backend service.

+ Response 200 (application/json)

        [
           {
              "market":"PPC_BTC",
              "volume":"41.49106",
              "high":"0.00486",
              "last":"0.00479",
              "low":"0.00471",
              "ask":"0.00482",
              "exchange":"BTCE",
              "bid":"0.00479",
              "timestamp":"2014-05-04T23:31:26Z"
           }
        ]

# ticker.EXCHANGE [/ticker.{EXCHANGE}]
## Subscribe to tickers for all markets on a specified EXCHANGE. [GET]

#####Bind Event
* `ticker`  

#####Ticker Fields
* `exchange`
* `market`
* `last`  The price of the most recent trade.
* `bid`  The best bid price.
* `ask`  The best ask price.
* `high`  The highest trade price in the last 24 hours.
* `low`  The lowest trade price in the last 24 hours.
* `volume`  The volume traded in the last 24 hours, denominated in the trade asset.
* `timestamp`  If not provided by the exchange it reflects the time initially received by our backend service.

+ Parameters
    + EXCHANGE (required, string, `BTCE`) ... Exchange specific ticker channel.  The exchange name must be UPPERCASE.
    
+ Response 200 (application/json)

        [
           {
              "market":"PPC_BTC",
              "volume":"41.49106",
              "high":"0.00486",
              "last":"0.00479",
              "low":"0.00471",
              "ask":"0.00482",
              "exchange":"BTCE",
              "bid":"0.00479",
              "timestamp":"2014-05-04T23:31:26Z"
           }
        ]

# aggregate_ticker [/aggregate_ticker]
## Subscribe to aggregate ticker data for all markets. [GET]

An aggregate ticker is intended to give a statistical summary of market data across all exchanges.  If an exchange does not report its trade volume via ticker data it is excluded.  ANXPRO is also excluded as they report the same trade volume across all price assets.

#####Bind Event
* `aggregate_ticker` 

#####Aggregate Ticker Fields
* `market`
* `vwaLast`Volume weighted average last price.
* `vwaLast15` 15 minute moving volume weighted average last price.
* `vwaBid` Volume weighted average bid price.
* `vwaAsk` Volume weighted average ask price.
* `high`  The single highest trade price in the last 24 hours.
* `low`  The single lowest trade price in the last 24 hours.
* `totalVolume` The sum of the volume traded in the last 24 hours across all exchanges, denominated in the trade asset.
* `totalTradeAssetVolume` The sum of the total volume for this trade asset across all markets.  See field `allMarketVolumes` for a list of markets used.
* `totalTradeAssetVolumeForPriceAssetType` The sum of the total volume for this trade asset across all markets for which the price asset type is the same as this markets' price asset type (fiat or digital).  
* `timestamp` Calculation timestamp.
* `exchangeVolumes` Exchange volumes used for this ticker.
* `allMarketVolumes` The total volume for all other markets that have the same trade asset.

+ Response 200 (application/json)

        [
           {
                "market":"BTC_USD",
                "vwaLast":"640.2271916",
                "vwaLast15":"639.1189731528572",
                "vwaBid":"639.6690524",
                "vwaAsk":"640.96108197",
                "high":"700",
                "low":"587.25",
                "totalVolume":"51322.46081245",
                "totalTradeAssetVolume":"69279.57128391",
                "totalTradeAssetVolumeForPriceAssetType":"69264.68169935",
                "timestamp":"2014-06-30T23:58:53.116Z",
                "exchangeVolumes":{
                     "BTER":"1.0447",
                     "BITSTAMP":"15503.24383652",
                     "VAULTOFSATOSHI":"11.16198578",
                     "HITBTC":"966.94",
                     "JUSTCOIN":"19.32159",
                     "KRAKEN":"18.97691245",
                     "BITFINEX":"21638.59924262",
                     "CRYPTOTRADE":"0.92367508",
                     "BTCE":"13162.24887"
                }
                "allMarketVolumes":{
                     "BTC_NOK":"40.02467",
                     "BTC_USD":"51322.46081245",
                     "BTC_CAD":"216.45633991",
                     "BTC_XRP":"14.88958456",
                     "BTC_GBP":"3.82988",
                     "BTC_PLN":"13.11620635",
                     "BTC_EUR":"2980.85478064",
                     "BTC_CNY":"14521.88168",
                     "BTC_RUR":"166.05733"
                }
           }
        ]

# aggregate_ticker.MARKET [/aggregate_ticker.{MARKET}]
## Subscribe to aggregate ticker data for a specified market. [GET]

An aggregate ticker is intended to give a statistical summary of market data across all exchanges.  If an exchange does not report its trade volume via ticker data it is excluded.  ANXPRO is also excluded as they report the same trade volume across all price assets.

#####Bind Event
* `aggregate_ticker` 

#####Aggregate Ticker Fields
* `market`
* `vwaLast`Volume weighted average last price.
* `vwaLast15` 15 minute moving volume weighted average last price.
* `vwaBid` Volume weighted average bid price.
* `vwaAsk` Volume weighted average ask price.
* `high`  The single highest trade price in the last 24 hours.
* `low`  The single lowest trade price in the last 24 hours.
* `totalVolume` The sum of the volume traded in the last 24 hours across all exchanges, denominated in the trade asset.
* `totalTradeAssetVolume` The sum of the total volume for this trade asset across all markets.  See field `allMarketVolumes` for a list of markets used.
* `totalTradeAssetVolumeForPriceAssetType` The sum of the total volume for this trade asset across all markets for which the price asset type is the same as this markets' price asset type (fiat or digital).  
* `timestamp` Calculation timestamp.
* `exchangeVolumes` Exchange volumes used for this ticker.
* `allMarketVolumes` The total volume for all other markets that have the same trade asset.

+ Parameters
    + MARKET (required, string, `BTC_USD`) ... Market specific aggregate ticker channel.  The market string must be UPPERCASE.
 
+ Response 200 (application/json)

        [
           {
                "market":"BTC_USD",
                "vwaLast":"640.2271916",
                "vwaLast15":"639.1189731528572",
                "vwaBid":"639.6690524",
                "vwaAsk":"640.96108197",
                "high":"700",
                "low":"587.25",
                "totalVolume":"51322.46081245",
                "totalTradeAssetVolume":"69279.57128391",
                "totalTradeAssetVolumeForPriceAssetType":"69264.68169935",
                "timestamp":"2014-06-30T23:58:53.116Z",
                "exchangeVolumes":{
                     "BTER":"1.0447",
                     "BITSTAMP":"15503.24383652",
                     "VAULTOFSATOSHI":"11.16198578",
                     "HITBTC":"966.94",
                     "JUSTCOIN":"19.32159",
                     "KRAKEN":"18.97691245",
                     "BITFINEX":"21638.59924262",
                     "CRYPTOTRADE":"0.92367508",
                     "BTCE":"13162.24887"
                }
                "allMarketVolumes":{
                     "BTC_NOK":"40.02467",
                     "BTC_USD":"51322.46081245",
                     "BTC_CAD":"216.45633991",
                     "BTC_XRP":"14.88958456",
                     "BTC_GBP":"3.82988",
                     "BTC_PLN":"13.11620635",
                     "BTC_EUR":"2980.85478064",
                     "BTC_CNY":"14521.88168",
                     "BTC_RUR":"166.05733"
                }
           }
        ]


# depth [/depth]
## Subscribe to market depth data for all markets on all exchanges. [GET]

#####Bind Event
* `depth`  Published to only when a change is detected.
* `depth-checkin` Published to at most once a minute if there is no change, otherwise immediately if a change is detected.

#####Market Depth Fields
* `exchange`
* `market`
* `timestamp` Reflects the time initially received by our backend service.
* `bids`  Open bid limit orders sorted from highest to lowest price.
* `asks`  Open ask limit orders sorted from lowest to highest price.
        * Limit orders are formatted as `["trade amount", "price"]`.

+ Response 200 (application/json)

        [
           {
              "market":"BTC_USD",
              "asks":[
                 [
                    "0.06",
                    "436.42"
                 ],
                ...
                 [
                    "0.21235",
                    "563.299"
                 ]
              ],
              "bids":[
                 [
                    "4.294",
                    "434.376"
                 ],
                ...
                 [
                    "0.092",
                    "389.501"
                 ]
              ],
              "exchange":"JUSTCOIN",
              "timestamp":"2014-05-06T13:44:40.063Z"
           }
        ]

# depth.EXCHANGE [/depth.{EXCHANGE}]
## Subscribe to market depth data for all markets on a specified EXCHANGE. [GET]
#####Bind Event
* `depth`  Published to only when a change is detected.
* `depth-checkin` Published to at most once a minute if there is no change, otherwise immediately if a change is detected.

#####Market Depth Fields
* `exchange`
* `market`
* `timestamp` Reflects the time initially received by our backend service.
* `bids`  Open bid limit orders sorted from highest to lowest price.
* `asks`  Open ask limit orders sorted from lowest to highest price.
        * Limit orders are formatted as `["trade amount", "price"]`.

+ Parameters
    + EXCHANGE (required, string, `JUSTCOIN`) ... Exchange specific market depth channel.  The exchange name must be UPPERCASE.

+ Response 200 (application/json)

        [
           {
              "market":"BTC_USD",
              "asks":[
                 [
                    "0.06",
                    "436.42"
                 ],
                ...
                 [
                    "0.21235",
                    "563.299"
                 ]
              ],
              "bids":[
                 [
                    "4.294",
                    "434.376"
                 ],
                ...
                 [
                    "0.092",
                    "389.501"
                 ]
              ],
              "exchange":"JUSTCOIN",
              "timestamp":"2014-05-06T13:44:40.063Z"
           }
        ]

# trades [/trades]
## Subscribe to public trade data for all markets on all exchanges.  [GET]  

Currently unsupported for CAMPBX, CRYPTOTRADE, COINBASE, CRYPTSY and LAKEBTC.
#####Bind Event
* `trades`  

#####Trade Fields
* `id` Optional id supplied by the respective exchange.
* `market`
* `amount`
* `price`
* `timestamp` Optional timestamp supplied by the exchange representing when the trade was executed.

+ Response 200 (application/json)

        {
           "BITSTAMP":[
              {
                 "market":"BTC_USD",
                 "amount":"0.01019541",
                 "price":"588.49",
                 "id":"5337198",
                 "timestamp":"2014-06-23T23:01:07Z"
              },
              {
                 "market":"BTC_USD",
                 "amount":"0.04222599",
                 "price":"588.5",
                 "id":"5337199",
                 "timestamp":"2014-06-23T23:01:10Z"
              }
           ]
        }

# trades.EXCHANGE [/trades.{EXCHANGE}]
## Subscribe to public trade data for all markets on a specified EXCHANGE. [GET]

Currently unsupported for CAMPBX, CRYPTOTRADE, COINBASE, CRYPTSY and LAKEBTC.
#####Bind Event
* `trades`  

#####Trade Fields
* `id` Optional id supplied by the respective exchange.
* `market`
* `amount`
* `price`
* `timestamp` Optional timestamp supplied by the exchange representing when the trade was executed.

+ Parameters
    + EXCHANGE (required, string, `BITSTAMP`) ... Exchange specific market depth channel.  The exchange name must be UPPERCASE.

+ Response 200 (application/json)

        {
           "BITSTAMP":[
              {
                 "market":"BTC_USD",
                 "amount":"0.01019541",
                 "price":"588.49",
                 "id":"5337198",
                 "timestamp":"2014-06-23T23:01:07Z"
              },
              {
                 "market":"BTC_USD",
                 "amount":"0.04222599",
                 "price":"588.5",
                 "id":"5337199",
                 "timestamp":"2014-06-23T23:01:10Z"
              }
           ]
        }
        
#Group Polling Convenience Functions  

# asset converter [/assets/convert/{from}?to=&amount=]  
## Convert between any known currencies from the supported Exchanges.  [GET]  

Conversions are based on the 15 minute volume weighted average prices built utilizing the `last` value from exchange tickers.  If there are no direct markets avaible to perform the conversion directly, proxy markets, prioritized by 24 hour trading volume, are used.  
  
  <a href="http://www.gliffy.com/go/publish/5876944" target="_blank">Conversion Algorithm Diagram</a>
+ Parameters 
    + from (required, string, `USD`) ... Asset to convert.  
    + to (required, string, `PPC,GBP,XPM`) ... A comma delimited list of assets to convert to.
    + amount (optional, number, `123.456`) ... Value amount to convert.  Defaults to 1.
        
+ Response 200 (application/json)

        {
           "EUR":435.45,
           "PPC":332.39491219,
           "USD":585.33,
           "XPM":1316.45350289,
           "XDG":1565236.17016794
        }

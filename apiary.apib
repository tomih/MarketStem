FORMAT: 1A
HOST: ws://marketstem.com:80/app/7c184500ec35e0786b0e?client=js&version=2.2

# marketstem
MarketStem joins market data from several digital asset exchanges into one convenient streaming API.

##Supported Exchanges
<a href="https://anxpro.com/" target="_blank">ANXPRO</a>,
<a href="https://www.bitstamp.net/" target="_blank">BITSTAMP</a>,
<a href="https://www.bitfinex.com/" target="_blank">BITFINEX</a>,
<a href="https://btc-e.com/" target="_blank">BTCE</a>,
<a href="https://vip.btcchina.com/" target="_blank">BTCHINA</a>,
<a href="https://bter.com/" target="_blank">BTER</a>,
<a href="https://campbx.com/" target="_blank">CAMPBX</a>,
<a href="https://cex.io/" target="_blank">CEXIO</a>,
<a href="https://coinbase.com/" target="_blank">COINBASE</a>,
<a href="https://crypto-trade.com/" target="_blank">CRYPTOTRADE</a>,
<a href="https://justcoin.com/" target="_blank">JUSTCOIN</a>,
<a href="https://www.kraken.com/" target="_blank">KRAKEN</a>,
<a href="https://www.vaultofsatoshi.com/" target="_blank">VAULTOFSATOSHI</a>

If you would like to see an additional exchange added you can add a client implementation to the open source project <a href="https://github.com/timmolter/XChange" target="_blank">XChange</a> or put up a <a href="http://xeiam.com/bounties" target="_blank">bounty</a> to have it implemented by the community.
##Connecting
This is a streaming web-socket API backed by <a href="https://github.com/stevegraham/slanger" target="_blank">Slanger</a>, an open source alternative to <a href="http://pusher.com/" target="_blank">Pusher</a>.  The <a href="http://pusher.com/docs/client_libraries" target="_blank">client libraries</a> supplied by Pusher can be used to connect and subscribe to channels.

 **Pusher/Slanger Application Key:** `7c184500ec35e0786b0e`  
 **Websocket Host:** `marketstem.com`  
 **HTML Host:** `marketstem.com`  


        <!DOCTYPE html>
        <head>
            <title>MarketStem Demo</title>
            <script src="http://js.pusher.com/2.2/pusher.min.js" type="text/javascript"></script>
            <script type="text/javascript">
                var pusher = new Pusher('7c184500ec35e0786b0e', {
                    wsHost: "marketstem.com",
                    httpHost: "marketstem.com"
                });
            
                var channel = pusher.subscribe('ticker');
                channel.bind('ticker', function(data) {
                    document.getElementById("ticker").innerHTML = JSON.stringify( data );
                });
            </script>
    
        <body>
            <p id="ticker">Waiting for ticker data...</p>
        </body>
        </head>


##Terminology
* Channel - A Pusher endpoint used to stream a specific type of data, i.e., `ticker.JUSTCOIN` streams all tickers for the exchange JUSTCOIN.
* Event - Used to indicate the type of data published/subcribed on a channel.  Allows a client to subscribe to a specific event on a given channel. See <a href="http://pusher.com/docs/client_api_guide/client_events" target="_blank">Pusher Events</a> for more information.
* Asset - Anything that can be traded on the supported exchanges above.
* Market - A pair of assets that can be traded for each other.  The first asset is considered the trade asset and the second is the price asset.
* Market Depth - See <a href="http://en.wikipedia.org/wiki/Order_book_(trading)#Book_depth" target="_blank">Order Book Depth</a>.

##Data Format
* Exchange - Uppercase string, e.g., `BTCE`.
* Asset - Three character uppercase string, e.g., `USD`.
* Market - Two tradable asset identifiers concatenated together, e.g., `BTCUSD`.  The second asset is the asset for which the market is priced in.
* Timestamps - Represented as <a href="http://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601</a> formatted strings, e.g., `2014-05-04T23:31:26Z`.
* Numbers - See <a href="http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html#toPlainString" target="_blank">Java's BigDecimal plain string format</a>.

##Service Architecture
The backend consists of a globally distributed network of failover nodes.
Nodes consist of a collection of services that are each responsible for their own resource, e.g., all tickers for the exchange Kraken`ticker.KRAKEN`.
Failover is handled on a resource level. If a resource fails to check in within two minutes an identical resource service from another node will take over.
Each resource service repeatedly polls its respective exchanges' service. By default, each resource is limited to poll at most once every five seconds
(can be increased if needed), e.g., all tickers will be collected from Kraken every five seconds.  The rate of polling is further limited by individual exchange service rate-limits or by the duration that data is cached by the respective exchange service.
Once the market data is retrieved it is then normalized to a common data model and published to PubNub.

##Benefits
* Open source community-driven exchange client development ensures that we can evolve as quickly as the crypto currency ecosystem.  
* Single service endpoint & common data model for all exchange data.
* No need to manage polling rate-limits.
* No need to manage exchange data cache durations to prevent duplicate data/processing.
* Increased sampling frequency because we can collect data for a single exchange from different ip addresses.
* New and removed assets are continually updated.
* Backend exchange clients are from the open source project <a href="https://github.com/timmolter/XChange" target="_blank">XChange</a>.  If you would like to see a new exchange, simply add a bountied feature request.

##Monthly Cost Estimate
*  <a href="https://www.digitalocean.com/pricing/" target="_blank">Digital Ocean Server Hosting</a>:
 * 2 * $10 VPS = `$20`
 * 2 * $5 VPS = `$10`
 * Total = `$30`
* AWS Services = `$30`
* Total = `$60`

##Contact

Submit any issues or feature requests on [Github](https://github.com/marketstem/MarketStem/issues?state=open)  

marketstem@gmail.com  
  
<a href="https://onename.io/marketstem" target="_blank">1EqUnmgUHWHo9kMQMLPht8KcvFj7qzXUtJ</a>

<a class="coinbase-button" data-code="efb37915d8c675b893e6094cdacb5e37" data-button-style="donation_large" data-custom="MarketStemDonation" href="https://coinbase.com/checkouts/efb37915d8c675b893e6094cdacb5e37">Donate Bitcoins</a><script src="https://coinbase.com/assets/button.js" type="text/javascript"></script>
# Group Market Data
Each section below represents a PubNub channel that is available for subscription.  All data objects are returned within a json array.  An effort is made to include multiple objects in a single message if the corresponding exchange offers retrieval of multiple objects in a single call.
# ticker [/ticker]
## Subscribe to tickers for all markets on all exchanges. [GET]
#####Ticker Fields
* `exchange`
* `market`
* `last`  The price of the most recent trade.
* `bid`  The best bid price.
* `ask`  The best ask price.
* `high`  The highest trade price in the last 24 hours.
* `low`  The lowest trade price in the last 24 hours.
* `volume`  The volume traded in the last 24 hours, denominated in the trade asset.
* `timestamp`  If not provided by the exchange it reflects the time initially received by our backend service.

+ Response 200 (application/json)

        [
           {
              "market":"PPCBTC",
              "volume":"41.49106",
              "high":"0.00486",
              "last":"0.00479",
              "low":"0.00471",
              "ask":"0.00482",
              "exchange":"BTCE",
              "bid":"0.00479",
              "timestamp":"2014-05-04T23:31:26Z"
           }
        ]

# ticker.EXCHANGE [/ticker.{EXCHANGE}]
## Subscribe to tickers for all markets on a specified EXCHANGE. [GET]
#####Ticker Fields
* `exchange`
* `market`
* `last`  The price of the most recent trade.
* `bid`  The best bid price.
* `ask`  The best ask price.
* `high`  The highest trade price in the last 24 hours.
* `low`  The lowest trade price in the last 24 hours.
* `volume`  The volume traded in the last 24 hours, denominated in the trade asset.
* `timestamp`  If not provided by the exchange it reflects the time initially received by our backend service.
+ Parameters
    + EXCHANGE (required, string, `BTCE`) ... Exchange specific ticker channel.  The exchange name must be UPPERCASE.
+ Response 200 (application/json)

        [
           {
              "market":"PPCBTC",
              "volume":"41.49106",
              "high":"0.00486",
              "last":"0.00479",
              "low":"0.00471",
              "ask":"0.00482",
              "exchange":"BTCE",
              "bid":"0.00479",
              "timestamp":"2014-05-04T23:31:26Z"
           }
        ]

# depth [/depth]
## Subscribe to market depth data for all markets on all exchanges. [GET]
#####Market Depth Fields
* `exchange`
* `market`
* `timestamp` Reflects the time initially received by our backend service.
* `bids`  Open bid limit orders sorted from highest to lowest price.
* `asks`  Open ask limit orders sorted from lowest to highest price.
        * Limit orders are formatted as `["trade amount", "price"]`.

+ Response 200 (application/json)

        [
           {
              "market":"BTCUSD",
              "asks":[
                 [
                    "0.06",
                    "436.42"
                 ],
                ...
                 [
                    "0.21235",
                    "563.299"
                 ]
              ],
              "bids":[
                 [
                    "4.294",
                    "434.376"
                 ],
                ...
                 [
                    "0.092",
                    "389.501"
                 ]
              ],
              "exchange":"JUSTCOIN",
              "timestamp":"2014-05-06T13:44:40.063Z"
           }
        ]

# depth.EXCHANGE [/depth.{EXCHANGE}]
## Subscribe to market depth data for all markets on a specified EXCHANGE. [GET]
#####Market Depth Fields
* `exchange`
* `market`
* `timestamp` Reflects the time initially received by our backend service.
* `bids`  Open bid limit orders sorted from highest to lowest price.
* `asks`  Open ask limit orders sorted from lowest to highest price.
        * Limit orders are formatted as `["trade amount", "price"]`.

+ Parameters
    + EXCHANGE (required, string, `JUSTCOIN`) ... Exchange specific market depth channel.  The exchange name must be UPPERCASE.

+ Response 200 (application/json)

        [
           {
              "market":"BTCUSD",
              "asks":[
                 [
                    "0.06",
                    "436.42"
                 ],
                ...
                 [
                    "0.21235",
                    "563.299"
                 ]
              ],
              "bids":[
                 [
                    "4.294",
                    "434.376"
                 ],
                ...
                 [
                    "0.092",
                    "389.501"
                 ]
              ],
              "exchange":"JUSTCOIN",
              "timestamp":"2014-05-06T13:44:40.063Z"
           }
        ]
